<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\myProject.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\myProject.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon Jan  9 06:20:30 2023
<BR><P>
<H3>Maximum Stack Usage =       1040 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
basic_all_tests_complete_message_handler &rArr; CU_print_run_results &rArr; CU_get_run_results_string &rArr; CU_get_elapsed_time &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from cmsis_os2.o(.text.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">TEST_Mutex()</a> from test_06_mutex.o(.text._Z10TEST_Mutexv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[7b]">taskOSAPI_TEST(void*)</a> from test_osapi.o(.text._Z14taskOSAPI_TESTPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[69]">TEST_ThreadJoin()</a> from test_02_thread_join.o(.text._Z15TEST_ThreadJoinv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[67]">TEST_ThreadName()</a> from test_00_thread_name.o(.text._Z15TEST_ThreadNamev) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[6c]">TEST_ThreadDelay()</a> from test_05_thread_delay.o(.text._Z16TEST_ThreadDelayv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[6f]">TEST_MortalThread()</a> from test_08_mortal_thread.o(.text._Z17TEST_MortalThreadv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[6e]">TEST_RecursiveMutex()</a> from test_07_recursive_mutex.o(.text._Z19TEST_RecursiveMutexv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[68]">TEST_ThreadCreation()</a> from test_01_thread_creation.o(.text._Z19TEST_ThreadCreationv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[6b]">TEST_ThreadPriority()</a> from test_04_thread_priority.o(.text._Z19TEST_ThreadPriorityv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[74]">TEST_ThreadStackSize()</a> from test_14_thread_stack_size.o(.text._Z20TEST_ThreadStackSizev) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[71]">TEST_ThreadRunDetailed()</a> from test_11_thread_run_detailed.o(.text._Z22TEST_ThreadRunDetailedv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[72]">TEST_ThreadStateChecking()</a> from test_12_thread_state.o(.text._Z24TEST_ThreadStateCheckingv) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[6a]">TEST_ThreadSuspendResume()</a> from test_03_thread_suspend_resume.o(.text._Z24TEST_ThreadSuspendResumev) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[70]">TEST_ThreadPriorityChange()</a> from test_10_thread_priority_change.o(.text._Z25TEST_ThreadPriorityChangev) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[73]">TEST_ThreadSuspendInactive()</a> from test_13_thread_suspend_inactive.o(.text._Z26TEST_ThreadSuspendInactivev) referenced 2 times from test_osapi.o(.text._Z14taskOSAPI_TESTPv)
 <LI><a href="#[90]">TestThread0::job()</a> from test_00_thread_name.o(.text._ZN11TestThread03jobEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[82]">TestThread0::~TestThread0__deallocating()</a> from test_00_thread_name.o(.text._ZN11TestThread0D0Ev) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[81]">TestThread0::~TestThread0__sub_object()</a> from test_00_thread_name.o(.text._ZN11TestThread0D2Ev) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[93]">TestThread1::job()</a> from test_01_thread_creation.o(.text._ZN11TestThread13jobEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[92]">TestThread1::~TestThread1__deallocating()</a> from test_01_thread_creation.o(.text._ZN11TestThread1D0Ev) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[91]">TestThread1::~TestThread1__sub_object()</a> from test_01_thread_creation.o(.text._ZN11TestThread1D2Ev) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[96]">TestThread2::job()</a> from test_02_thread_join.o(.text._ZN11TestThread23jobEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[95]">TestThread2::~TestThread2__deallocating()</a> from test_02_thread_join.o(.text._ZN11TestThread2D0Ev) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[94]">TestThread2::~TestThread2__sub_object()</a> from test_02_thread_join.o(.text._ZN11TestThread2D2Ev) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[99]">TestThread3::job()</a> from test_03_thread_suspend_resume.o(.text._ZN11TestThread33jobEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[98]">TestThread3::~TestThread3__deallocating()</a> from test_03_thread_suspend_resume.o(.text._ZN11TestThread3D0Ev) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[97]">TestThread3::~TestThread3__sub_object()</a> from test_03_thread_suspend_resume.o(.text._ZN11TestThread3D2Ev) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[9c]">TestThread4::job()</a> from test_04_thread_priority.o(.text._ZN11TestThread43jobEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[9b]">TestThread4::~TestThread4__deallocating()</a> from test_04_thread_priority.o(.text._ZN11TestThread4D0Ev) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[9a]">TestThread4::~TestThread4__sub_object()</a> from test_04_thread_priority.o(.text._ZN11TestThread4D2Ev) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[9f]">TestThread5::job()</a> from test_05_thread_delay.o(.text._ZN11TestThread53jobEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[9e]">TestThread5::~TestThread5__deallocating()</a> from test_05_thread_delay.o(.text._ZN11TestThread5D0Ev) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[9d]">TestThread5::~TestThread5__sub_object()</a> from test_05_thread_delay.o(.text._ZN11TestThread5D2Ev) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[a2]">TestThread11::job()</a> from test_11_thread_run_detailed.o(.text._ZN12TestThread113jobEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[a1]">TestThread11::~TestThread11__deallocating()</a> from test_11_thread_run_detailed.o(.text._ZN12TestThread11D0Ev) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[a0]">TestThread11::~TestThread11__sub_object()</a> from test_11_thread_run_detailed.o(.text._ZN12TestThread11D2Ev) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[a5]">TestThread12::job()</a> from test_12_thread_state.o(.text._ZN12TestThread123jobEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[a4]">TestThread12::~TestThread12__deallocating()</a> from test_12_thread_state.o(.text._ZN12TestThread12D0Ev) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[a3]">TestThread12::~TestThread12__sub_object()</a> from test_12_thread_state.o(.text._ZN12TestThread12D2Ev) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[a8]">TestThread13::job()</a> from test_13_thread_suspend_inactive.o(.text._ZN12TestThread133jobEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[a7]">TestThread13::~TestThread13__deallocating()</a> from test_13_thread_suspend_inactive.o(.text._ZN12TestThread13D0Ev) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[a6]">TestThread13::~TestThread13__sub_object()</a> from test_13_thread_suspend_inactive.o(.text._ZN12TestThread13D2Ev) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[ab]">TestThread14::job()</a> from test_14_thread_stack_size.o(.text._ZN12TestThread143jobEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[aa]">TestThread14::~TestThread14__deallocating()</a> from test_14_thread_stack_size.o(.text._ZN12TestThread14D0Ev) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[a9]">TestThread14::~TestThread14__sub_object()</a> from test_14_thread_stack_size.o(.text._ZN12TestThread14D2Ev) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[ae]">TestThread10A::job()</a> from test_10_thread_priority_change.o(.text._ZN13TestThread10A3jobEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[ad]">TestThread10A::~TestThread10A__deallocating()</a> from test_10_thread_priority_change.o(.text._ZN13TestThread10AD0Ev) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[ac]">TestThread10A::~TestThread10A__sub_object()</a> from test_10_thread_priority_change.o(.text._ZN13TestThread10AD2Ev) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[b1]">TestThread10B::job()</a> from test_10_thread_priority_change.o(.text._ZN13TestThread10B3jobEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[b0]">TestThread10B::~TestThread10B__deallocating()</a> from test_10_thread_priority_change.o(.text._ZN13TestThread10BD0Ev) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[af]">TestThread10B::~TestThread10B__sub_object()</a> from test_10_thread_priority_change.o(.text._ZN13TestThread10BD2Ev) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[b7]">MyMortalThread::end()</a> from test_08_mortal_thread.o(.text._ZN14MyMortalThread3endEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[b6]">MyMortalThread::loop()</a> from test_08_mortal_thread.o(.text._ZN14MyMortalThread4loopEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[b5]">MyMortalThread::begin()</a> from test_08_mortal_thread.o(.text._ZN14MyMortalThread5beginEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[b3]">MyMortalThread::~MyMortalThread__deallocating()</a> from test_08_mortal_thread.o(.text._ZN14MyMortalThreadD0Ev) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[b2]">MyMortalThread::~MyMortalThread__sub_object()</a> from test_08_mortal_thread.o(.text._ZN14MyMortalThreadD2Ev) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[b4]">osapi::MortalThread::job()</a> from test_08_mortal_thread.o(.text._ZN5osapi12MortalThread3jobEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[b4]">osapi::MortalThread::job()</a> from test_08_mortal_thread.o(.text._ZN5osapi12MortalThread3jobEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[b9]">osapi::MortalThread::~MortalThread__deallocating()</a> from test_08_mortal_thread.o(.text._ZN5osapi12MortalThreadD0Ev) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[b8]">osapi::MortalThread::~MortalThread__sub_object()</a> from test_08_mortal_thread.o(.text._ZN5osapi12MortalThreadD2Ev) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[bc]">osapi::ThreadInterface::~ThreadInterface__deallocating()</a> from test_00_thread_name.o(.text._ZN5osapi15ThreadInterfaceD0Ev) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi15ThreadInterfaceE)
 <LI><a href="#[bb]">osapi::ThreadInterface::~ThreadInterface__sub_object()</a> from test_00_thread_name.o(.text._ZN5osapi15ThreadInterfaceD2Ev) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi15ThreadInterfaceE)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[86]">osapi::Thread::isJoinable()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[8a]">osapi::Thread::getPriority()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[89]">osapi::Thread::setPriority(int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[75]">osapi::Thread::threadFunction(void*)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread14threadFunctionEPv) referenced 2 times from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[8e]">osapi::Thread::getUsedStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[8d]">osapi::Thread::getTotalStackSize()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[83]">osapi::Thread::run()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread3runEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[85]">osapi::Thread::join(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[8f]">osapi::Thread::sleep(unsigned int)</a> from test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[88]">osapi::Thread::resume()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[8b]">osapi::Thread::getName()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[87]">osapi::Thread::suspend()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[8c]">osapi::Thread::getState()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_00_thread_name.o(.rodata._ZTV11TestThread0)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_01_thread_creation.o(.rodata._ZTV11TestThread1)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_02_thread_join.o(.rodata._ZTV11TestThread2)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_04_thread_priority.o(.rodata._ZTV11TestThread4)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_05_thread_delay.o(.rodata._ZTV11TestThread5)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_12_thread_state.o(.rodata._ZTV12TestThread12)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[84]">osapi::Thread::isRunning()</a> from test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[be]">osapi::Thread::~Thread__deallocating()</a> from test_00_thread_name.o(.text._ZN5osapi6ThreadD0Ev) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[bd]">osapi::Thread::~Thread__sub_object()</a> from test_00_thread_name.o(.text._ZN5osapi6ThreadD2Ev) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[ba]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 3 times from test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
 <LI><a href="#[ba]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 14 times from test_00_thread_name.o(.rodata._ZTVN5osapi15ThreadInterfaceE)
 <LI><a href="#[ba]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
 <LI><a href="#[66]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[80]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[78]">basic_all_tests_complete_message_handler</a> from basic.o(.text.basic_all_tests_complete_message_handler) referenced 2 times from basic.o(.text.basic_initialize)
 <LI><a href="#[7a]">basic_suite_cleanup_failure_message_handler</a> from basic.o(.text.basic_suite_cleanup_failure_message_handler) referenced 2 times from basic.o(.text.basic_initialize)
 <LI><a href="#[79]">basic_suite_init_failure_message_handler</a> from basic.o(.text.basic_suite_init_failure_message_handler) referenced 2 times from basic.o(.text.basic_initialize)
 <LI><a href="#[77]">basic_test_complete_message_handler</a> from basic.o(.text.basic_test_complete_message_handler) referenced 2 times from basic.o(.text.basic_initialize)
 <LI><a href="#[76]">basic_test_start_message_handler</a> from basic.o(.text.basic_test_start_message_handler) referenced 2 times from basic.o(.text.basic_initialize)
 <LI><a href="#[7f]">fputc</a> from retarget_io.o(.text.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[7f]">fputc</a> from retarget_io.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[64]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7d]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[7c]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[7e]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c0]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[189]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[18a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[18d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ed]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_compare_strings
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_number_width
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_failure
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_test
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_suite
</UL>

<P><STRONG><a name="[10a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadName()
</UL>

<P><STRONG><a name="[12d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_failure
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_test
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_suite
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_elapsed_time
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_elapsed_time
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_elapsed_time
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
</UL>

<P><STRONG><a name="[166]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_test
</UL>

<P><STRONG><a name="[e1]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[194]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[195]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[196]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ca]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c1]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[198]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>CU_add_suite</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, testdb.o(.text.CU_add_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CU_add_suite &rArr; CU_add_suite_with_setup_and_teardown &rArr; suite_exists &rArr; CU_compare_strings &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite_with_setup_and_teardown
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[d4]"></a>CU_add_suite_with_setup_and_teardown</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, testdb.o(.text.CU_add_suite_with_setup_and_teardown))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CU_add_suite_with_setup_and_teardown &rArr; suite_exists &rArr; CU_compare_strings &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_is_test_running
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_suite
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suite_exists
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_suite
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite
</UL>

<P><STRONG><a name="[db]"></a>CU_add_test</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, testdb.o(.text.CU_add_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CU_add_test &rArr; test_exists &rArr; CU_compare_strings &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_is_test_running
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_test
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exists
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_test
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[df]"></a>CU_assertImplementation</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, testrun.o(.text.CU_assertImplementation))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CU_assertImplementation &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_failure
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendInactive()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MortalThread()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RecursiveMutex()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Mutex()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadDelay()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriority()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendResume()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadJoin()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadCreation()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadName()
</UL>

<P><STRONG><a name="[e2]"></a>CU_basic_run_tests</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, basic.o(.text.CU_basic_run_tests))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = CU_basic_run_tests &rArr; basic_run_all_tests &rArr; CU_run_all_tests &rArr; run_single_suite &rArr; run_single_test &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_registry
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_run_all_tests
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[104]"></a>CU_basic_set_mode</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, basic.o(.text.CU_basic_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CU_basic_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[e7]"></a>CU_basic_show_failures</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, basic.o(.text.CU_basic_show_failures))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CU_basic_show_failures &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[e8]"></a>CU_cleanup_registry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, testdb.o(.text.CU_cleanup_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CU_cleanup_registry &rArr; CU_destroy_existing_registry &rArr; cleanup_test_registry &rArr; cleanup_suite &rArr; cleanup_test &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_clear_previous_results
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_destroy_existing_registry
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_is_test_running
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_initialize_registry
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[ea]"></a>CU_clear_previous_results</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testrun.o(.text.CU_clear_previous_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CU_clear_previous_results &rArr; clear_previous_results &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_previous_results
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_cleanup_registry
</UL>

<P><STRONG><a name="[ec]"></a>CU_compare_strings</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, util.o(.text.CU_compare_strings))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CU_compare_strings &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exists
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suite_exists
</UL>

<P><STRONG><a name="[ee]"></a>CU_create_new_registry</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, testdb.o(.text.CU_create_new_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CU_create_new_registry &rArr; malloc &rArr; __aligned_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_initialize_registry
</UL>

<P><STRONG><a name="[e9]"></a>CU_destroy_existing_registry</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, testdb.o(.text.CU_destroy_existing_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CU_destroy_existing_registry &rArr; cleanup_test_registry &rArr; cleanup_suite &rArr; cleanup_test &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_test_registry
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_cleanup_registry
</UL>

<P><STRONG><a name="[f2]"></a>CU_get_elapsed_time</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, testrun.o(.text.CU_get_elapsed_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CU_get_elapsed_time &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_run_results_string
</UL>

<P><STRONG><a name="[133]"></a>CU_get_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cuerror.o(.text.CU_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
</UL>

<P><STRONG><a name="[fa]"></a>CU_get_error_action</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cuerror.o(.text.CU_get_error_action))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_suite
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
</UL>

<P><STRONG><a name="[105]"></a>CU_get_failure_list</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testrun.o(.text.CU_get_failure_list))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[e3]"></a>CU_get_registry</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testdb.o(.text.CU_get_registry))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_run_results_string
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_basic_run_tests
</UL>

<P><STRONG><a name="[f3]"></a>CU_get_run_results_string</STRONG> (Thumb, 3764 bytes, Stack size 896 bytes, testrun.o(.text.CU_get_run_results_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = CU_get_run_results_string &rArr; CU_get_elapsed_time &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_number_width
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_elapsed_time
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_registry
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_print_run_results
</UL>

<P><STRONG><a name="[f6]"></a>CU_initialize_registry</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, testdb.o(.text.CU_initialize_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = CU_initialize_registry &rArr; CU_cleanup_registry &rArr; CU_destroy_existing_registry &rArr; cleanup_test_registry &rArr; cleanup_suite &rArr; cleanup_test &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_create_new_registry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_cleanup_registry
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_is_test_running
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[d5]"></a>CU_is_test_running</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testrun.o(.text.CU_is_test_running))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_test
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite_with_setup_and_teardown
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_cleanup_registry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_initialize_registry
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_registry
</UL>

<P><STRONG><a name="[f4]"></a>CU_number_width</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, util.o(.text.CU_number_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CU_number_width &rArr; snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_run_results_string
</UL>

<P><STRONG><a name="[f8]"></a>CU_print_run_results</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, testrun.o(.text.CU_print_run_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = CU_print_run_results &rArr; CU_get_run_results_string &rArr; CU_get_elapsed_time &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_run_results_string
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_all_tests_complete_message_handler
</UL>

<P><STRONG><a name="[f9]"></a>CU_run_all_tests</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, testrun.o(.text.CU_run_all_tests))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = CU_run_all_tests &rArr; run_single_suite &rArr; run_single_test &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_suite
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_previous_results
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_error_action
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_registry
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_run_all_tests
</UL>

<P><STRONG><a name="[130]"></a>CU_set_all_test_complete_handler</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, testrun.o(.text.CU_set_all_test_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CU_set_all_test_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
</UL>

<P><STRONG><a name="[da]"></a>CU_set_error</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cuerror.o(.text.CU_set_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CU_set_error &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_error_desc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_test
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite_with_setup_and_teardown
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_cleanup_registry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_initialize_registry
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_registry
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
</UL>

<P><STRONG><a name="[fe]"></a>CU_set_registry</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, testdb.o(.text.CU_set_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CU_set_registry &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_is_test_running
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_run_all_tests
</UL>

<P><STRONG><a name="[132]"></a>CU_set_suite_cleanup_failure_handler</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, testrun.o(.text.CU_set_suite_cleanup_failure_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CU_set_suite_cleanup_failure_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
</UL>

<P><STRONG><a name="[131]"></a>CU_set_suite_init_failure_handler</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, testrun.o(.text.CU_set_suite_init_failure_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CU_set_suite_init_failure_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
</UL>

<P><STRONG><a name="[12f]"></a>CU_set_test_complete_handler</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, testrun.o(.text.CU_set_test_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CU_set_test_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
</UL>

<P><STRONG><a name="[12e]"></a>CU_set_test_start_handler</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, testrun.o(.text.CU_set_test_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CU_set_test_start_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
</UL>

<P><STRONG><a name="[167]"></a>ITM_SendChar</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, retarget_io.o(.text.ITM_SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os2.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>TEST_Mutex()</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, test_06_mutex.o(.text._Z10TEST_Mutexv))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEST_Mutex() &rArr; CU_assertImplementation &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Mutex::unlock()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Mutex::lock(unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[7b]"></a>taskOSAPI_TEST(void*)</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, test_osapi.o(.text._Z14taskOSAPI_TESTPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = taskOSAPI_TEST(void*) &rArr; CU_basic_run_tests &rArr; basic_run_all_tests &rArr; CU_run_all_tests &rArr; run_single_suite &rArr; run_single_test &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_failure_list
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_test
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_cleanup_registry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_initialize_registry
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_basic_show_failures
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_basic_set_mode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_basic_run_tests
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[69]"></a>TEST_ThreadJoin()</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, test_02_thread_join.o(.text._Z15TEST_ThreadJoinv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = TEST_ThreadJoin() &rArr; TestThread2::TestThread2__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread2::~TestThread2__sub_object()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread2::TestThread2__sub_object()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::isJoinable()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::isRunning()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[67]"></a>TEST_ThreadName()</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, test_00_thread_name.o(.text._Z15TEST_ThreadNamev))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = TEST_ThreadName() &rArr; TestThread0::TestThread0__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread0::~TestThread0__sub_object()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getName()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread0::TestThread0__sub_object()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[6c]"></a>TEST_ThreadDelay()</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, test_05_thread_delay.o(.text._Z16TEST_ThreadDelayv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = TEST_ThreadDelay() &rArr; TestThread5::TestThread5__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread5::~TestThread5__sub_object()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread5::TestThread5__sub_object()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::getSystemTime()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[6f]"></a>TEST_MortalThread()</STRONG> (Thumb, 354 bytes, Stack size 88 bytes, test_08_mortal_thread.o(.text._Z17TEST_MortalThreadv))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = TEST_MortalThread() &rArr; MyMortalThread::MyMortalThread__sub_object() &rArr; osapi::MortalThread::MortalThread__sub_object(int, unsigned int, char const*) &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMortalThread::~MyMortalThread__sub_object()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::MortalThread::kill()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMortalThread::MyMortalThread__sub_object()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::run()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[6e]"></a>TEST_RecursiveMutex()</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, test_07_recursive_mutex.o(.text._Z19TEST_RecursiveMutexv))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TEST_RecursiveMutex() &rArr; CU_assertImplementation &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::RecursiveMutex::unlock()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::RecursiveMutex::lock(unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[68]"></a>TEST_ThreadCreation()</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, test_01_thread_creation.o(.text._Z19TEST_ThreadCreationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = TEST_ThreadCreation() &rArr; TestThread1::TestThread1__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread1::~TestThread1__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread1::TestThread1__sub_object()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::run()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[6b]"></a>TEST_ThreadPriority()</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, test_04_thread_priority.o(.text._Z19TEST_ThreadPriorityv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = TEST_ThreadPriority() &rArr; TestThread4::TestThread4__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread4::~TestThread4__sub_object()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread4::TestThread4__sub_object()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getPriority()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::setPriority(int)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[74]"></a>TEST_ThreadStackSize()</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, test_14_thread_stack_size.o(.text._Z20TEST_ThreadStackSizev))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = TEST_ThreadStackSize() &rArr; TestThread14::TestThread14__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread14::~TestThread14__sub_object()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread14::TestThread14__sub_object()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getUsedStackSize()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getTotalStackSize()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::run()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[71]"></a>TEST_ThreadRunDetailed()</STRONG> (Thumb, 386 bytes, Stack size 88 bytes, test_11_thread_run_detailed.o(.text._Z22TEST_ThreadRunDetailedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = TEST_ThreadRunDetailed() &rArr; osapi::Thread::run() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::isRunning()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::run()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread11::~TestThread11__sub_object()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread11::TestThread11__sub_object()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[72]"></a>TEST_ThreadStateChecking()</STRONG> (Thumb, 558 bytes, Stack size 80 bytes, test_12_thread_state.o(.text._Z24TEST_ThreadStateCheckingv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = TEST_ThreadStateChecking() &rArr; osapi::Thread::run() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getState()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::resume()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::suspend()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::run()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread12::~TestThread12__sub_object()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread12::TestThread12__sub_object()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[6a]"></a>TEST_ThreadSuspendResume()</STRONG> (Thumb, 404 bytes, Stack size 88 bytes, test_03_thread_suspend_resume.o(.text._Z24TEST_ThreadSuspendResumev))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = TEST_ThreadSuspendResume() &rArr; TestThread3::TestThread3__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread3::~TestThread3__sub_object()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread3::TestThread3__sub_object()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::resume()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::suspend()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[70]"></a>TEST_ThreadPriorityChange()</STRONG> (Thumb, 450 bytes, Stack size 112 bytes, test_10_thread_priority_change.o(.text._Z25TEST_ThreadPriorityChangev))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = TEST_ThreadPriorityChange() &rArr; TestThread10B::TestThread10B__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getPriority()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10A::~TestThread10A__sub_object()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10B::~TestThread10B__sub_object()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10B::TestThread10B__sub_object()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10A::TestThread10A__sub_object()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[73]"></a>TEST_ThreadSuspendInactive()</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, test_13_thread_suspend_inactive.o(.text._Z26TEST_ThreadSuspendInactivev))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = TEST_ThreadSuspendInactive() &rArr; TestThread13::TestThread13__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread13::~TestThread13__sub_object()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread13::TestThread13__sub_object()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getState()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::resume()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::suspend()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osapi.o(.text._Z14taskOSAPI_TESTPv)
</UL>
<P><STRONG><a name="[90]"></a>TestThread0::job()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, test_00_thread_name.o(.text._ZN11TestThread03jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TestThread0::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
</UL>
<P><STRONG><a name="[109]"></a>TestThread0::TestThread0__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, test_00_thread_name.o(.text._ZN11TestThread0C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread0::TestThread0__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadName()
</UL>

<P><STRONG><a name="[82]"></a>TestThread0::~TestThread0__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_00_thread_name.o(.text._ZN11TestThread0D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread0::~TestThread0__deallocating() &rArr; TestThread0::~TestThread0__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread0::~TestThread0__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
</UL>
<P><STRONG><a name="[81]"></a>TestThread0::~TestThread0__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_00_thread_name.o(.text._ZN11TestThread0D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread0::~TestThread0__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread0::~TestThread0__deallocating()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadName()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
</UL>
<P><STRONG><a name="[93]"></a>TestThread1::job()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, test_01_thread_creation.o(.text._ZN11TestThread13jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TestThread1::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
</UL>
<P><STRONG><a name="[111]"></a>TestThread1::TestThread1__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, test_01_thread_creation.o(.text._ZN11TestThread1C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread1::TestThread1__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadCreation()
</UL>

<P><STRONG><a name="[92]"></a>TestThread1::~TestThread1__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_01_thread_creation.o(.text._ZN11TestThread1D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread1::~TestThread1__deallocating() &rArr; TestThread1::~TestThread1__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread1::~TestThread1__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
</UL>
<P><STRONG><a name="[91]"></a>TestThread1::~TestThread1__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_01_thread_creation.o(.text._ZN11TestThread1D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread1::~TestThread1__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread1::~TestThread1__deallocating()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadCreation()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
</UL>
<P><STRONG><a name="[96]"></a>TestThread2::job()</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, test_02_thread_join.o(.text._ZN11TestThread23jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestThread2::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
</UL>
<P><STRONG><a name="[107]"></a>TestThread2::TestThread2__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, test_02_thread_join.o(.text._ZN11TestThread2C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread2::TestThread2__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadJoin()
</UL>

<P><STRONG><a name="[95]"></a>TestThread2::~TestThread2__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_02_thread_join.o(.text._ZN11TestThread2D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread2::~TestThread2__deallocating() &rArr; TestThread2::~TestThread2__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread2::~TestThread2__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
</UL>
<P><STRONG><a name="[94]"></a>TestThread2::~TestThread2__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_02_thread_join.o(.text._ZN11TestThread2D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread2::~TestThread2__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread2::~TestThread2__deallocating()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadJoin()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
</UL>
<P><STRONG><a name="[99]"></a>TestThread3::job()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, test_03_thread_suspend_resume.o(.text._ZN11TestThread33jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestThread3::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
</UL>
<P><STRONG><a name="[117]"></a>TestThread3::TestThread3__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, test_03_thread_suspend_resume.o(.text._ZN11TestThread3C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread3::TestThread3__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendResume()
</UL>

<P><STRONG><a name="[98]"></a>TestThread3::~TestThread3__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_03_thread_suspend_resume.o(.text._ZN11TestThread3D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread3::~TestThread3__deallocating() &rArr; TestThread3::~TestThread3__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread3::~TestThread3__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
</UL>
<P><STRONG><a name="[97]"></a>TestThread3::~TestThread3__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_03_thread_suspend_resume.o(.text._ZN11TestThread3D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread3::~TestThread3__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread3::~TestThread3__deallocating()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendResume()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
</UL>
<P><STRONG><a name="[9c]"></a>TestThread4::job()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, test_04_thread_priority.o(.text._ZN11TestThread43jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestThread4::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
</UL>
<P><STRONG><a name="[112]"></a>TestThread4::TestThread4__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, test_04_thread_priority.o(.text._ZN11TestThread4C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread4::TestThread4__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriority()
</UL>

<P><STRONG><a name="[9b]"></a>TestThread4::~TestThread4__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_04_thread_priority.o(.text._ZN11TestThread4D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread4::~TestThread4__deallocating() &rArr; TestThread4::~TestThread4__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread4::~TestThread4__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
</UL>
<P><STRONG><a name="[9a]"></a>TestThread4::~TestThread4__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_04_thread_priority.o(.text._ZN11TestThread4D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread4::~TestThread4__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread4::~TestThread4__deallocating()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriority()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
</UL>
<P><STRONG><a name="[9f]"></a>TestThread5::job()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, test_05_thread_delay.o(.text._ZN11TestThread53jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestThread5::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
</UL>
<P><STRONG><a name="[10c]"></a>TestThread5::TestThread5__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, test_05_thread_delay.o(.text._ZN11TestThread5C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread5::TestThread5__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadDelay()
</UL>

<P><STRONG><a name="[9e]"></a>TestThread5::~TestThread5__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_05_thread_delay.o(.text._ZN11TestThread5D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread5::~TestThread5__deallocating() &rArr; TestThread5::~TestThread5__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread5::~TestThread5__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
</UL>
<P><STRONG><a name="[9d]"></a>TestThread5::~TestThread5__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_05_thread_delay.o(.text._ZN11TestThread5D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread5::~TestThread5__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread5::~TestThread5__deallocating()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadDelay()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
</UL>
<P><STRONG><a name="[a2]"></a>TestThread11::job()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, test_11_thread_run_detailed.o(.text._ZN12TestThread113jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestThread11::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[114]"></a>TestThread11::TestThread11__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, test_11_thread_run_detailed.o(.text._ZN12TestThread11C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread11::TestThread11__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
</UL>

<P><STRONG><a name="[a1]"></a>TestThread11::~TestThread11__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_11_thread_run_detailed.o(.text._ZN12TestThread11D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread11::~TestThread11__deallocating() &rArr; TestThread11::~TestThread11__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread11::~TestThread11__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[a0]"></a>TestThread11::~TestThread11__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_11_thread_run_detailed.o(.text._ZN12TestThread11D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread11::~TestThread11__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread11::~TestThread11__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[a5]"></a>TestThread12::job()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, test_12_thread_state.o(.text._ZN12TestThread123jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestThread12::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
</UL>
<P><STRONG><a name="[116]"></a>TestThread12::TestThread12__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, test_12_thread_state.o(.text._ZN12TestThread12C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread12::TestThread12__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
</UL>

<P><STRONG><a name="[a4]"></a>TestThread12::~TestThread12__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_12_thread_state.o(.text._ZN12TestThread12D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread12::~TestThread12__deallocating() &rArr; TestThread12::~TestThread12__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread12::~TestThread12__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
</UL>
<P><STRONG><a name="[a3]"></a>TestThread12::~TestThread12__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_12_thread_state.o(.text._ZN12TestThread12D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread12::~TestThread12__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread12::~TestThread12__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
</UL>
<P><STRONG><a name="[a8]"></a>TestThread13::job()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, test_13_thread_suspend_inactive.o(.text._ZN12TestThread133jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TestThread13::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
</UL>
<P><STRONG><a name="[11a]"></a>TestThread13::TestThread13__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, test_13_thread_suspend_inactive.o(.text._ZN12TestThread13C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread13::TestThread13__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendInactive()
</UL>

<P><STRONG><a name="[a7]"></a>TestThread13::~TestThread13__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_13_thread_suspend_inactive.o(.text._ZN12TestThread13D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread13::~TestThread13__deallocating() &rArr; TestThread13::~TestThread13__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread13::~TestThread13__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
</UL>
<P><STRONG><a name="[a6]"></a>TestThread13::~TestThread13__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_13_thread_suspend_inactive.o(.text._ZN12TestThread13D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread13::~TestThread13__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread13::~TestThread13__deallocating()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendInactive()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
</UL>
<P><STRONG><a name="[ab]"></a>TestThread14::job()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, test_14_thread_stack_size.o(.text._ZN12TestThread143jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestThread14::job()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
</UL>
<P><STRONG><a name="[113]"></a>TestThread14::TestThread14__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, test_14_thread_stack_size.o(.text._ZN12TestThread14C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread14::TestThread14__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
</UL>

<P><STRONG><a name="[aa]"></a>TestThread14::~TestThread14__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_14_thread_stack_size.o(.text._ZN12TestThread14D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread14::~TestThread14__deallocating() &rArr; TestThread14::~TestThread14__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread14::~TestThread14__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
</UL>
<P><STRONG><a name="[a9]"></a>TestThread14::~TestThread14__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_14_thread_stack_size.o(.text._ZN12TestThread14D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread14::~TestThread14__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread14::~TestThread14__deallocating()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
</UL>
<P><STRONG><a name="[ae]"></a>TestThread10A::job()</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, test_10_thread_priority_change.o(.text._ZN13TestThread10A3jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TestThread10A::job() &rArr; uxTaskPriorityGet &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
</UL>
<P><STRONG><a name="[118]"></a>TestThread10A::TestThread10A__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, test_10_thread_priority_change.o(.text._ZN13TestThread10AC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread10A::TestThread10A__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
</UL>

<P><STRONG><a name="[ad]"></a>TestThread10A::~TestThread10A__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_10_thread_priority_change.o(.text._ZN13TestThread10AD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread10A::~TestThread10A__deallocating() &rArr; TestThread10A::~TestThread10A__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10A::~TestThread10A__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
</UL>
<P><STRONG><a name="[ac]"></a>TestThread10A::~TestThread10A__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_10_thread_priority_change.o(.text._ZN13TestThread10AD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread10A::~TestThread10A__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10A::~TestThread10A__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
</UL>
<P><STRONG><a name="[b1]"></a>TestThread10B::job()</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, test_10_thread_priority_change.o(.text._ZN13TestThread10B3jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TestThread10B::job() &rArr; uxTaskPriorityGet &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
</UL>
<P><STRONG><a name="[119]"></a>TestThread10B::TestThread10B__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, test_10_thread_priority_change.o(.text._ZN13TestThread10BC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TestThread10B::TestThread10B__sub_object() &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
</UL>

<P><STRONG><a name="[b0]"></a>TestThread10B::~TestThread10B__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_10_thread_priority_change.o(.text._ZN13TestThread10BD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TestThread10B::~TestThread10B__deallocating() &rArr; TestThread10B::~TestThread10B__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10B::~TestThread10B__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
</UL>
<P><STRONG><a name="[af]"></a>TestThread10B::~TestThread10B__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_10_thread_priority_change.o(.text._ZN13TestThread10BD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TestThread10B::~TestThread10B__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10B::~TestThread10B__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
</UL>
<P><STRONG><a name="[b7]"></a>MyMortalThread::end()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, test_08_mortal_thread.o(.text._ZN14MyMortalThread3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MyMortalThread::end()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
</UL>
<P><STRONG><a name="[b6]"></a>MyMortalThread::loop()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, test_08_mortal_thread.o(.text._ZN14MyMortalThread4loopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyMortalThread::loop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
</UL>
<P><STRONG><a name="[b5]"></a>MyMortalThread::begin()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, test_08_mortal_thread.o(.text._ZN14MyMortalThread5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MyMortalThread::begin()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
</UL>
<P><STRONG><a name="[10d]"></a>MyMortalThread::MyMortalThread__sub_object()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, test_08_mortal_thread.o(.text._ZN14MyMortalThreadC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MyMortalThread::MyMortalThread__sub_object() &rArr; osapi::MortalThread::MortalThread__sub_object(int, unsigned int, char const*) &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::MortalThread::MortalThread__sub_object(int, unsigned int, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MortalThread()
</UL>

<P><STRONG><a name="[b3]"></a>MyMortalThread::~MyMortalThread__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_08_mortal_thread.o(.text._ZN14MyMortalThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MyMortalThread::~MyMortalThread__deallocating() &rArr; MyMortalThread::~MyMortalThread__sub_object() &rArr; osapi::MortalThread::~MortalThread__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMortalThread::~MyMortalThread__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
</UL>
<P><STRONG><a name="[b2]"></a>MyMortalThread::~MyMortalThread__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_08_mortal_thread.o(.text._ZN14MyMortalThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MyMortalThread::~MyMortalThread__sub_object() &rArr; osapi::MortalThread::~MortalThread__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::MortalThread::~MortalThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMortalThread::~MyMortalThread__deallocating()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MortalThread()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
</UL>
<P><STRONG><a name="[b4]"></a>osapi::MortalThread::job()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, test_08_mortal_thread.o(.text._ZN5osapi12MortalThread3jobEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osapi::MortalThread::job()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
</UL>
<P><STRONG><a name="[10e]"></a>osapi::MortalThread::kill()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, test_08_mortal_thread.o(.text._ZN5osapi12MortalThread4killEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::MortalThread::kill()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MortalThread()
</UL>

<P><STRONG><a name="[11e]"></a>osapi::MortalThread::MortalThread__sub_object(int, unsigned int, char const*)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, test_08_mortal_thread.o(.text._ZN5osapi12MortalThreadC2EijPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = osapi::MortalThread::MortalThread__sub_object(int, unsigned int, char const*) &rArr; osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMortalThread::MyMortalThread__sub_object()
</UL>

<P><STRONG><a name="[b9]"></a>osapi::MortalThread::~MortalThread__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, test_08_mortal_thread.o(.text._ZN5osapi12MortalThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::MortalThread::~MortalThread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
</UL>
<P><STRONG><a name="[b8]"></a>osapi::MortalThread::~MortalThread__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, test_08_mortal_thread.o(.text._ZN5osapi12MortalThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osapi::MortalThread::~MortalThread__sub_object() &rArr; osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMortalThread::~MyMortalThread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
</UL>
<P><STRONG><a name="[10b]"></a>osapi::getSystemTime()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osapi_freertos.o(.text._ZN5osapi13getSystemTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osapi::getSystemTime() &rArr; xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadDelay()
</UL>

<P><STRONG><a name="[10f]"></a>osapi::RecursiveMutex::lock(unsigned int)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, test_07_recursive_mutex.o(.text._ZN5osapi14RecursiveMutex4lockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osapi::RecursiveMutex::lock(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RecursiveMutex()
</UL>

<P><STRONG><a name="[110]"></a>osapi::RecursiveMutex::unlock()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, test_07_recursive_mutex.o(.text._ZN5osapi14RecursiveMutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osapi::RecursiveMutex::unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RecursiveMutex()
</UL>

<P><STRONG><a name="[128]"></a>osapi::ThreadInterface::ThreadInterface__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, test_00_thread_name.o(.text._ZN5osapi15ThreadInterfaceC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::ThreadInterface::ThreadInterface__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>

<P><STRONG><a name="[bc]"></a>osapi::ThreadInterface::~ThreadInterface__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, test_00_thread_name.o(.text._ZN5osapi15ThreadInterfaceD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::ThreadInterface::~ThreadInterface__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_00_thread_name.o(.rodata._ZTVN5osapi15ThreadInterfaceE)
</UL>
<P><STRONG><a name="[bb]"></a>osapi::ThreadInterface::~ThreadInterface__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, test_00_thread_name.o(.text._ZN5osapi15ThreadInterfaceD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::~Thread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_00_thread_name.o(.rodata._ZTVN5osapi15ThreadInterfaceE)
</UL>
<P><STRONG><a name="[102]"></a>osapi::Mutex::lock(unsigned int)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, test_06_mutex.o(.text._ZN5osapi5Mutex4lockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osapi::Mutex::lock(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Mutex()
</UL>

<P><STRONG><a name="[103]"></a>osapi::Mutex::unlock()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, test_06_mutex.o(.text._ZN5osapi5Mutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::Mutex::unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Mutex()
</UL>

<P><STRONG><a name="[86]"></a>osapi::Thread::isJoinable()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread10isJoinableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::Thread::isJoinable()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadJoin()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[8a]"></a>osapi::Thread::getPriority()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread11getPriorityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = osapi::Thread::getPriority() &rArr; uxTaskPriorityGet &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriority()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[89]"></a>osapi::Thread::setPriority(int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread11setPriorityEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osapi::Thread::setPriority(int) &rArr; vTaskPrioritySet &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriority()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[75]"></a>osapi::Thread::threadFunction(void*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread14threadFunctionEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = osapi::Thread::threadFunction(void*) &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_00_thread_name.o(.text._ZN5osapi6Thread3runEv)
</UL>
<P><STRONG><a name="[8e]"></a>osapi::Thread::getUsedStackSize()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread16getUsedStackSizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osapi::Thread::getUsedStackSize() &rArr; uxTaskGetStackHighWaterMark &rArr; prvTaskCheckFreeStackSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[8d]"></a>osapi::Thread::getTotalStackSize()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread17getTotalStackSizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::Thread::getTotalStackSize()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[83]"></a>osapi::Thread::run()</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = osapi::Thread::run() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MortalThread()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadCreation()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[85]"></a>osapi::Thread::join(unsigned int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread4joinEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = osapi::Thread::join(unsigned int) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MortalThread()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadDelay()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriority()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendResume()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadJoin()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[8f]"></a>osapi::Thread::sleep(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread5sleepEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = osapi::Thread::sleep(unsigned int) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[88]"></a>osapi::Thread::resume()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread6resumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osapi::Thread::resume() &rArr; vTaskResume &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendInactive()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendResume()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[8b]"></a>osapi::Thread::getName()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread7getNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::Thread::getName()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadName()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[87]"></a>osapi::Thread::suspend()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread7suspendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osapi::Thread::suspend() &rArr; vTaskSuspend &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendInactive()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendResume()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[8c]"></a>osapi::Thread::getState()</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread8getStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = osapi::Thread::getState() &rArr; eTaskGetState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendInactive()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[84]"></a>osapi::Thread::isRunning()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, test_00_thread_name.o(.text._ZN5osapi6Thread9isRunningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = osapi::Thread::isRunning() &rArr; eTaskGetState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadJoin()
</UL>
<BR>[Address Reference Count : 15]<UL><LI> test_05_thread_delay.o(.rodata._ZTV11TestThread5)
<LI> test_13_thread_suspend_inactive.o(.rodata._ZTV12TestThread13)
<LI> test_00_thread_name.o(.rodata._ZTV11TestThread0)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_01_thread_creation.o(.rodata._ZTV11TestThread1)
<LI> test_02_thread_join.o(.rodata._ZTV11TestThread2)
<LI> test_03_thread_suspend_resume.o(.rodata._ZTV11TestThread3)
<LI> test_04_thread_priority.o(.rodata._ZTV11TestThread4)
<LI> test_08_mortal_thread.o(.rodata._ZTV14MyMortalThread)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
<LI> test_14_thread_stack_size.o(.rodata._ZTV12TestThread14)
<LI> test_12_thread_state.o(.rodata._ZTV12TestThread12)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10A)
<LI> test_10_thread_priority_change.o(.rodata._ZTV13TestThread10B)
<LI> test_11_thread_run_detailed.o(.rodata._ZTV12TestThread11)
</UL>
<P><STRONG><a name="[11b]"></a>osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, test_00_thread_name.o(.text._ZN5osapi6ThreadC2EijNS_8JoinableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::ThreadInterface::ThreadInterface__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread13::TestThread13__sub_object()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread14::TestThread14__sub_object()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::MortalThread::MortalThread__sub_object(int, unsigned int, char const*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread5::TestThread5__sub_object()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread4::TestThread4__sub_object()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread3::TestThread3__sub_object()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread2::TestThread2__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread1::TestThread1__sub_object()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread0::TestThread0__sub_object()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10B::TestThread10B__sub_object()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10A::TestThread10A__sub_object()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread11::TestThread11__sub_object()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread12::TestThread12__sub_object()
</UL>

<P><STRONG><a name="[be]"></a>osapi::Thread::~Thread__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, test_00_thread_name.o(.text._ZN5osapi6ThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osapi::Thread::~Thread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
</UL>
<P><STRONG><a name="[bd]"></a>osapi::Thread::~Thread__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_00_thread_name.o(.text._ZN5osapi6ThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osapi::Thread::~Thread__sub_object() &rArr; osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::ThreadInterface::~ThreadInterface__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread13::~TestThread13__sub_object()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread14::~TestThread14__sub_object()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::MortalThread::~MortalThread__sub_object()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread5::~TestThread5__sub_object()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread4::~TestThread4__sub_object()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread3::~TestThread3__sub_object()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread2::~TestThread2__sub_object()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread1::~TestThread1__sub_object()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread0::~TestThread0__sub_object()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10A::~TestThread10A__sub_object()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10B::~TestThread10B__sub_object()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread11::~TestThread11__sub_object()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread12::~TestThread12__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
</UL>
<P><STRONG><a name="[11c]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread13::~TestThread13__deallocating()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread14::~TestThread14__deallocating()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMortalThread::~MyMortalThread__deallocating()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread5::~TestThread5__deallocating()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread4::~TestThread4__deallocating()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread3::~TestThread3__deallocating()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread2::~TestThread2__deallocating()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread1::~TestThread1__deallocating()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread0::~TestThread0__deallocating()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10B::~TestThread10B__deallocating()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10A::~TestThread10A__deallocating()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread11::~TestThread11__deallocating()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread12::~TestThread12__deallocating()
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_assert</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, retarget_io.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_run_results_string
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_test
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_suite
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_previous_results
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_failure
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_test
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_compare_strings
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite_with_setup_and_teardown
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_destroy_existing_registry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_cleanup_registry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_initialize_registry
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_test
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_suite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_test
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exists
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_test
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_suite
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suite_exists
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_suite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_test_registry
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_print_run_results
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_registry
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_suite_cleanup_failure_message_handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_suite_init_failure_message_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_complete_message_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_start_message_handler
</UL>

<P><STRONG><a name="[ba]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test_00_thread_name.o(.rodata._ZTVN5osapi6ThreadE)
<LI> test_00_thread_name.o(.rodata._ZTVN5osapi15ThreadInterfaceE)
<LI> test_08_mortal_thread.o(.rodata._ZTVN5osapi12MortalThreadE)
</UL>
<P><STRONG><a name="[12b]"></a>abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text.abort))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[12c]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[127]"></a>eTaskGetState</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, tasks.o(.text.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eTaskGetState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getState()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::suspend()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::isRunning()
</UL>

<P><STRONG><a name="[fd]"></a>exit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, main.o(.text.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
</UL>

<P><STRONG><a name="[7f]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, retarget_io.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[162]"></a>pvPortMalloc</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[17a]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[150]"></a>pxPortInitialiseStack</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[13c]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[115]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
</UL>

<P><STRONG><a name="[122]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tasks.o(.text.uxTaskGetStackHighWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uxTaskGetStackHighWaterMark &rArr; prvTaskCheckFreeStackSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getUsedStackSize()
</UL>

<P><STRONG><a name="[11d]"></a>uxTaskPriorityGet</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tasks.o(.text.uxTaskPriorityGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uxTaskPriorityGet &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::getPriority()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10B::job()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread10A::job()
</UL>

<P><STRONG><a name="[16e]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, cmsis_os2.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[17d]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, cmsis_os2.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[172]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os2.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[142]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[14f]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[13e]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[13d]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[137]"></a>vPortEnterCritical</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[138]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[14a]"></a>vPortFree</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[173]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[15c]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[108]"></a>vTaskDelay</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MortalThread()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendResume()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadJoin()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadCreation()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::sleep(unsigned int)
</UL>

<P><STRONG><a name="[106]"></a>vTaskDelete</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::threadFunction(void*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
</UL>

<P><STRONG><a name="[177]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[161]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[16b]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[169]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[16c]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[120]"></a>vTaskPrioritySet</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, tasks.o(.text.vTaskPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPrioritySet &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::setPriority(int)
</UL>

<P><STRONG><a name="[125]"></a>vTaskResume</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(.text.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vTaskResume &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::resume()
</UL>

<P><STRONG><a name="[13a]"></a>vTaskStartScheduler</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>vTaskSuspend</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, tasks.o(.text.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::suspend()
</UL>

<P><STRONG><a name="[15a]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[bf]"></a>vTaskSwitchContext</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[171]"></a>xPortStartScheduler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[100]"></a>xPortSysTickHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[129]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::Thread__sub_object(int, unsigned int, osapi::Joinable, char const*)
</UL>

<P><STRONG><a name="[143]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[14c]"></a>xQueueGenericReset</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[121]"></a>xQueueGenericSend</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::threadFunction(void*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[179]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[157]"></a>xQueueReceive</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[124]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::join(unsigned int)
</UL>

<P><STRONG><a name="[178]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[123]"></a>xTaskCreate</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::Thread::run()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>xTaskCreateStatic</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[ff]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11f]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapi::getSystemTime()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[176]"></a>xTaskIncrementTick</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[149]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[17b]"></a>xTaskPriorityInherit</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskPriorityInherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[160]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[15b]"></a>xTaskResumeAll</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[170]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[155]"></a>xTimerGenericCommand</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[17e]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[199]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[19a]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[19b]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[e4]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_print_run_results
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_basic_show_failures
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_basic_run_tests
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_suite_cleanup_failure_message_handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_suite_init_failure_message_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_complete_message_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_start_message_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_initialize
</UL>

<P><STRONG><a name="[180]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[19d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[19e]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[101]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStackSize()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendInactive()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadStateChecking()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadRunDetailed()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriorityChange()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MortalThread()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RecursiveMutex()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Mutex()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadDelay()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadPriority()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadSuspendResume()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadJoin()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadCreation()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ThreadName()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_all_tests_complete_message_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOSAPI_TEST(void*)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19f]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1a0]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1a1]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[f5]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_number_width
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_run_results_string
</UL>

<P><STRONG><a name="[182]"></a>__aligned_malloc</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, malloca.o(i.__aligned_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aligned_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f1]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloca.o(i.__free$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_failure_list
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_failure
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_destroy_existing_registry
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_test
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_suite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_test
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_suite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_test_registry
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_print_run_results
</UL>

<P><STRONG><a name="[ef]"></a>malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, malloca.o(i.__malloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = malloc &rArr; __aligned_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_run_results_string
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_failure
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_create_new_registry
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_test
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_suite
</UL>

<P><STRONG><a name="[1a2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12a]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e5]"></a>basic_initialize</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, basic.o(.text.basic_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = basic_initialize &rArr; CU_set_error &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_error
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_suite_cleanup_failure_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_suite_init_failure_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_all_test_complete_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_test_complete_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_test_start_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_basic_run_tests
</UL>

<P><STRONG><a name="[e6]"></a>basic_run_all_tests</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, basic.o(.text.basic_run_all_tests))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = basic_run_all_tests &rArr; CU_run_all_tests &rArr; run_single_suite &rArr; run_single_test &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_registry
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_basic_run_tests
</UL>

<P><STRONG><a name="[76]"></a>basic_test_start_message_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, basic.o(.text.basic_test_start_message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = basic_test_start_message_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> basic.o(.text.basic_initialize)
</UL>
<P><STRONG><a name="[77]"></a>basic_test_complete_message_handler</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, basic.o(.text.basic_test_complete_message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = basic_test_complete_message_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> basic.o(.text.basic_initialize)
</UL>
<P><STRONG><a name="[78]"></a>basic_all_tests_complete_message_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, basic.o(.text.basic_all_tests_complete_message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = basic_all_tests_complete_message_handler &rArr; CU_print_run_results &rArr; CU_get_run_results_string &rArr; CU_get_elapsed_time &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_print_run_results
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> basic.o(.text.basic_initialize)
</UL>
<P><STRONG><a name="[79]"></a>basic_suite_init_failure_message_handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, basic.o(.text.basic_suite_init_failure_message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = basic_suite_init_failure_message_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> basic.o(.text.basic_initialize)
</UL>
<P><STRONG><a name="[7a]"></a>basic_suite_cleanup_failure_message_handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, basic.o(.text.basic_suite_cleanup_failure_message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = basic_suite_cleanup_failure_message_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> basic.o(.text.basic_initialize)
</UL>
<P><STRONG><a name="[fc]"></a>get_error_desc</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, cuerror.o(.text.get_error_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_error_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_set_error
</UL>

<P><STRONG><a name="[f0]"></a>cleanup_test_registry</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, testdb.o(.text.cleanup_test_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = cleanup_test_registry &rArr; cleanup_suite &rArr; cleanup_test &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_suite
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_destroy_existing_registry
</UL>

<P><STRONG><a name="[d7]"></a>create_suite</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, testdb.o(.text.create_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = create_suite &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite_with_setup_and_teardown
</UL>

<P><STRONG><a name="[d8]"></a>suite_exists</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, testdb.o(.text.suite_exists))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = suite_exists &rArr; CU_compare_strings &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_compare_strings
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite_with_setup_and_teardown
</UL>

<P><STRONG><a name="[d9]"></a>insert_suite</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, testdb.o(.text.insert_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = insert_suite &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_suite_with_setup_and_teardown
</UL>

<P><STRONG><a name="[dc]"></a>create_test</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, testdb.o(.text.create_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = create_test &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_test
</UL>

<P><STRONG><a name="[dd]"></a>test_exists</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, testdb.o(.text.test_exists))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = test_exists &rArr; CU_compare_strings &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_compare_strings
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_test
</UL>

<P><STRONG><a name="[de]"></a>insert_test</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, testdb.o(.text.insert_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = insert_test &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_add_test
</UL>

<P><STRONG><a name="[135]"></a>cleanup_suite</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, testdb.o(.text.cleanup_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = cleanup_suite &rArr; cleanup_test &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_test
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_test_registry
</UL>

<P><STRONG><a name="[136]"></a>cleanup_test</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, testdb.o(.text.cleanup_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = cleanup_test &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_suite
</UL>

<P><STRONG><a name="[e0]"></a>add_failure</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, testrun.o(.text.add_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_assertImplementation
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_test
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_suite
</UL>

<P><STRONG><a name="[eb]"></a>clear_previous_results</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, testrun.o(.text.clear_previous_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = clear_previous_results &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_failure_list
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_clear_previous_results
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
</UL>

<P><STRONG><a name="[fb]"></a>run_single_suite</STRONG> (Thumb, 862 bytes, Stack size 64 bytes, testrun.o(.text.run_single_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = run_single_suite &rArr; run_single_test &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_test
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_failure
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_get_error_action
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CU_run_all_tests
</UL>

<P><STRONG><a name="[134]"></a>cleanup_failure_list</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, testrun.o(.text.cleanup_failure_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cleanup_failure_list &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_previous_results
</UL>

<P><STRONG><a name="[165]"></a>run_single_test</STRONG> (Thumb, 590 bytes, Stack size 208 bytes, testrun.o(.text.run_single_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = run_single_test &rArr; add_failure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_failure
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_single_suite
</UL>

<P><STRONG><a name="[139]"></a>stdout_putchar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget_io.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stdout_putchar &rArr; ITM_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7c]"></a>prvTaskExitError</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[174]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[175]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[163]"></a>prvHeapInit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[164]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[14b]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[148]"></a>prvCopyDataToQueue</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[153]"></a>prvIsQueueFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[15f]"></a>prvUnlockQueue</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[152]"></a>prvIsQueueEmpty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[17c]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[146]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[14d]"></a>prvInitialiseNewTask</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[13f]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[140]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[145]"></a>prvDeleteTCB</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[16a]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[13b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[16d]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, tasks.o(.text.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[7d]"></a>prvIdleTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[144]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[168]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(.text.prvTaskCheckFreeStackSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[141]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[7e]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[15e]"></a>prvGetNextExpireTime</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[159]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[156]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[158]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[154]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[151]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[15d]"></a>prvSwitchTimerLists</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[183]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[186]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[185]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[80]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
